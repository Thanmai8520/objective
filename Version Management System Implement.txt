Overview
The purpose of this project is to create a system that fetches and displays the current version of code deployed across various environments. Additionally, the system should post these details to Confluence for documentation purposes. The project involves a Node.js backend, a React frontend, and a MySQL database to store version details.

Components
Backend (Node.js)
Frontend (ReactJS)
Database (MySQL)
Confluence API
Backend
Setup
The backend is implemented using Node.js and the Express framework. It interacts with a MySQL database to fetch and manage version details.

Key Functionality
Database Connection: A MySQL connection pool is set up to handle database queries with configured details such as host, user, password, and database name.
API Endpoints:
GET /mae/getBuild: Fetches all build details.
GET /mae/getBuild/:applicationName: Fetches build details for a specific application.
GET /refreshVSfile: Refreshes a JSON file with data from the database.
GET /getvsflags/:envname: Fetches specific environment flags from a JSON file.
Database Query: Queries are designed to fetch the latest build details based on the combination of ApplicationName and TargetEnvironment.
Frontend
Setup
The frontend is implemented using ReactJS and styled with Bootstrap to ensure a responsive design.

Key Functionality
VersionTable Component: Fetches version details from the backend and displays them in a table format, with a dropdown to filter versions by application name. It ensures the latest version details are displayed based on the date and time.
Styling: Bootstrap is used for styling the table and other UI components. The navigation bar is fixed and does not scroll with the page to enhance user experience.
Database
Setup
The database used is MySQL, with a table named maebuildinfo to store version details.

Key Fields
ApplicationName
TargetEnvironment
Version
Release
Jira TaskId
ReleaseNotes
Date_Time
Integration with Confluence
Posting Version Details
The integration with Confluence has been completed. A POST request is made to the Confluence API to update the version details page, ensuring that the documentation in Confluence is always up-to-date with the latest deployment information.

Scheduling
Scheduling the POST API to Confluence for automated updates is currently in progress. This will ensure that the Confluence page is updated regularly with the latest version details.

Steps to Implement
Setup Node.js Backend:

Install necessary packages (express, mysql, cors, etc.).
Configure the MySQL connection pool.
Implement API endpoints to fetch and manage version details.
Setup React Frontend:

Create the VersionTable component.
Fetch version details from the backend.
Implement filtering and display logic.
Configure MySQL Database:

Create the maebuildinfo table.
Ensure the table is populated with version details.
Integrate with Confluence:

Use the Confluence API to post the latest version details.
Continue working on scheduling the POST API for automated updates.
Challenges and Solutions
Database Connectivity Issues: Increased connection timeout to handle delays and implemented error handling to manage connection failures.
Data Filtering: Ensured the latest version details are fetched and displayed based on the date and time.
Responsive Design: Used Bootstrap to create a responsive table and navigation bar, ensuring the navigation bar adapts to different screen sizes.
Confluence API Connection: Faced difficulty connecting to Confluence through the API but resolved it using a personal token and space key.
Adding Table to Confluence: Encountered challenges adding a table to an existing Confluence page under a specific heading, which was addressed by refining the API request and handling page structure.
Future Enhancements
Automated Updates: Complete the automation of posting to Confluence using scheduled jobs.
Enhanced Filtering: Provide more advanced filtering options in the frontend.
Performance Optimization: Optimize database queries for better performance.
